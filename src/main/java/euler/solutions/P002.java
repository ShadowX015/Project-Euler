/*
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the
first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the
even-valued terms.


SOLUTION NOTE: this will solve the problem up to an arbitrary term of the fibonacci sequence, although support
is not included for BigInteger and so there is an unknown upper bound. Solution to the problem as posed is
given with the runtime argument of 4000000.

 */

package euler.solutions;

public class P002 {

    public static void main(String[] args){
        int max = Integer.parseInt(args[0]);
        long sum = 0L;

        // the sequence is seeded with 0 and 1 as starting terms
        int lowTerm = 0;
        int highTerm = 1;

        int nextTerm = nextFibTerm(lowTerm, highTerm);

        while(nextTerm < max){
            // add even terms to the sum
            if(nextTerm % 2 == 0){
                sum += nextTerm;
            }

            // update terms to calculate the next value
            lowTerm = highTerm;
            highTerm = nextTerm;
            nextTerm = nextFibTerm(lowTerm, highTerm);
        }

        System.out.println(sum);
    }

    public static int nextFibTerm(int a, int b){
        return a + b;
    }
}
